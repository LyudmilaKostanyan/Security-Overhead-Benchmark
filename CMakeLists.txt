cmake_minimum_required(VERSION 3.16)
project(SecurityOverheadBench CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(CMAKE_CONFIGURATION_TYPES)
  foreach(cfg ${CMAKE_CONFIGURATION_TYPES})
    string(TOUPPER "${cfg}" cfgU)
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${cfgU} "${CMAKE_BINARY_DIR}")
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${cfgU} "${CMAKE_BINARY_DIR}")
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${cfgU} "${CMAKE_BINARY_DIR}")
  endforeach()
else()
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}")
endif()

option(SECURE_BUILD "Enable security hardening" OFF)

if(MSVC)
  add_compile_options(
    $<$<CONFIG:Release,RelWithDebInfo>:/O2>
    $<$<CONFIG:MinSizeRel>:/O1>
  )
else()
  add_compile_options(-O2)
endif()

if(SECURE_BUILD)
  message(STATUS "SECURE_BUILD=ON")

  if(MSVC)
    add_compile_options(/GS $<$<CONFIG:Release,RelWithDebInfo>:/sdl>)
    add_link_options($<$<CONFIG:Release,RelWithDebInfo>:/guard:cf>)
  else()
    add_compile_options(-fstack-protector-strong)
    if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
      include(CheckCXXCompilerFlag)
      check_cxx_compiler_flag("-fstack-clash-protection" HAS_SCP)
      if(HAS_SCP)
        add_compile_options(-fstack-clash-protection)
      endif()
      add_compile_options(-D_FORTIFY_SOURCE=2)
      add_link_options(-Wl,-z,relro -Wl,-z,now)
      set(CMAKE_POSITION_INDEPENDENT_CODE ON)
      add_link_options(-pie)
      add_compile_definitions(_GLIBCXX_ASSERTIONS=1)
    endif()
  endif()

else()
  message(STATUS "SECURE_BUILD=OFF")

  if(MSVC)
    add_compile_options(/GS- $<$<CONFIG:Release,RelWithDebInfo>:/sdl->)
  else()
    add_compile_options(-fno-stack-protector)
    if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
      add_compile_options(-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0)
      add_link_options(-Wl,-z,norelro)
      include(CheckCXXCompilerFlag)
      check_cxx_compiler_flag("-no-pie" HAS_NO_PIE)
      if(HAS_NO_PIE)
        add_link_options(-no-pie)
      endif()
    endif()
  endif()
endif()

add_executable(main main.cpp)
